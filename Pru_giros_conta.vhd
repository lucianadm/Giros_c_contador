-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
-- Created on Sun Oct 20 19:36:55 2024

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY Pru_giros_conta IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        Muro : IN STD_LOGIC := '0';
        fin_contador : IN STD_LOGIC := '0';
        MD : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
        MI : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
        hab_contador : OUT STD_LOGIC
    );
END Pru_giros_conta;

ARCHITECTURE BEHAVIOR OF Pru_giros_conta IS
    TYPE type_fstate IS (gira_90_Der,gira_90_Izq,Avanza_giroDer,Avanza_giroIzq);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,Muro,fin_contador)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= Avanza_giroDer;
            MD <= "00";
            MI <= "00";
            hab_contador <= '0';
        ELSE
            MD <= "00";
            MI <= "00";
            hab_contador <= '0';
            CASE fstate IS
                WHEN gira_90_Der =>
                    IF ((fin_contador = '0')) THEN
                        reg_fstate <= gira_90_Der;
                    ELSIF ((fin_contador = '1')) THEN
                        reg_fstate <= Avanza_giroDer;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= gira_90_Der;
                    END IF;

                    hab_contador <= '1';

                    MI <= "10";

                    MD <= "01";
                WHEN gira_90_Izq =>
                    IF ((fin_contador = '0')) THEN
                        reg_fstate <= gira_90_Izq;
                    ELSIF ((fin_contador = '1')) THEN
                        reg_fstate <= Avanza_giroIzq;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= gira_90_Izq;
                    END IF;

                    hab_contador <= '1';

                    MI <= "01";

                    MD <= "10";
                WHEN Avanza_giroDer =>
                    IF ((Muro = '1')) THEN
                        reg_fstate <= gira_90_Izq;
                    ELSIF ((Muro = '0')) THEN
                        reg_fstate <= Avanza_giroDer;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Avanza_giroDer;
                    END IF;

                    hab_contador <= '0';

                    MD <= "01";
                    MD <= "01";
                WHEN Avanza_giroIzq =>
                    IF ((Muro = '1')) THEN
                        reg_fstate <= gira_90_Der;
                    ELSIF ((Muro = '0')) THEN
                        reg_fstate <= Avanza_giroIzq;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= Avanza_giroIzq;
                    END IF;

                    hab_contador <= '0';

                    MI <= "01";
                    MI <= "01";
                WHEN OTHERS => 
                    MD <= "XX";
                    MI <= "XX";
                    hab_contador <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
